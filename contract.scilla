(* sample contract *)

library ZRCLib

(* service constants *)
let symbol         = "ZRC"
let name           = "Zil p3 token"
let decimals       = Uint32 18
let tokenPriceInit = Uint128 10
let dividendsCosts = Uint128 15

let token_growth_rate0 = Uint128 4
let token_growth_rate1 = Uint128 3

let _100 = Uint128 100

(* for sending message *)
let one_msg = 
  fun (msg : Message) => 
      let nil_msg = Nil {Message} in
      Cons {Message} msg nil_msg

let for_dividendes_calc =
    fun(zilAmount : Uint128) =>
    let dividendesAmount = builtin mul zilAmount dividendsCosts in
        let forDividendes = builtin div dividendesAmount _100 in
            forDividendes


let tokenPrice = 
    fun (balance : Uint128) =>
    fun (totalSupply : Uint128) =>
    let val = builtin lt balance tokenPriceInit in
        match val with
        | True  => tokenPriceInit
        | False =>
            let ratio = builtin div balance totalSupply in
            let price = builtin mul ratio token_growth_rate0 in
            let tokenPrice = builtin div price token_growth_rate1 in
                tokenPrice
        end
        
        

let total_supply_add = 
    fun (tokensAmount : Uint128) =>
    fun (totalSupply : Uint128) =>
        let new_total_supply = 
            builtin add totalSupply tokensAmount in
                new_total_supply


let return_excess_funds =
    fun (zilAmount      : Uint128) =>
    fun (tokensReceived : Uint128) =>
    fun (tokenPrice     : Uint128) =>
        let ratio = builtin mul tokensReceived tokenPrice in
            let surplus_funds = builtin sub zilAmount ratio in
                surplus_funds

let zil_to_tokens = 
    fun (zilAmount  : Uint128) =>
    fun (tokenPrice : Uint128) =>
        let isZil = builtin lt tokenPrice zilAmount in
            match isZil with
                | False => Uint128 0
                | True =>
                    let tokensReceived = 
                        builtin div zilAmount tokenPrice in
                            tokensReceived
            end
        


contract ZRCPyramid
()


field totalSupply      : Uint128 = Uint128 0
field forReferralCosts : Uint32  = Uint32 5
field forWithdrawCosts : Uint32  = Uint32 10
field dividendes       : Uint128 = Uint128 0

(* maping balance from address *)
field balances : Map ByStr20 Uint128 =
  let m = Emp ByStr20 Uint128 in m


(***************************************************)
(*    getting the value of the number of tokens    *)
(***************************************************)
transition BalanceOf (tokenOwner : ByStr20)
    bl <- balances;
    val = builtin get bl tokenOwner;
    match val with
    | Some v =>
        msg = {
              _tag       : "BalanceOf";
              _recipient : _sender; 
              _amount    : Uint128 0;
              balance    : v
        };
        msgs = one_msg msg;
        send msgs
    | None =>
        msg = {
            _tag       : "BalanceOf";
            _recipient : _sender;
            _amount    : Uint128 0;
            balance    : Uint128 0
        };
        msgs = one_msg msg;
        send msgs
    end
end


(***************************************************)
(*       getting the value contract balance        *)
(***************************************************)
transition contracBalance()
    bl_contract <- _balance;
    msg = {
        _tag       : "ContracBalance";
        _recipient : _sender;
        _amount    : Uint128 0;
        balance    : bl_contract
    };
    msgs = one_msg msg;
    send msgs
end


transition getTokenPrice()
    contract_balance <- _balance;
    total_supply <- totalSupply;
    
    tokenPrice = tokenPrice contract_balance total_supply;

    msg = {
        _tag       : "TokenPrice";
        _recipient : _sender;
        _amount    : Uint128 0;
        tokenPrice : tokenPrice
    };
    msgs = one_msg msg;
    send msgs
end


transition Buy()
    tokens_balances <- balances;
    contract_balance <- _balance;
    total_supply <- totalSupply;
    zil_amount = _amount;
    
    for_dividendes = for_dividendes_calc zil_amount;
    tokenPrice = tokenPrice contract_balance total_supply;
    zil_amount = builtin sub zil_amount for_dividendes;
    
    tokensAmount = zil_to_tokens zil_amount tokenPrice;
    new_balances = builtin put tokens_balances _sender tokensAmount;
    
    new_total_supply = total_supply_add tokensAmount total_supply;
    
    excess_funds = return_excess_funds zil_amount tokensAmount tokenPrice;
    
    accept;
    
    balances := new_balances;
    totalSupply := new_total_supply;
    
    msg = {
        _tag : "Buy";
        _recipient : _sender;
        _amount : excess_funds;
        transfer : tokensAmount
    };
    e = {
        _eventname : "PurchaseTokens"; 
        customer : _sender; 
        amount : _amount;
        transfer : tokensAmount;
        returnExcessFunds : excess_funds;
        forDividendes : for_dividendes
    };
    msgs = one_msg msg;
    
    
    event e;
    send msgs
end


